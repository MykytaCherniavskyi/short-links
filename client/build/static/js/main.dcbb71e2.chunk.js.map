{"version":3,"sources":["hooks/http.hook.tsx","context/AuthContext.tsx","components/Loader.tsx","components/LinksList.tsx","pages/LinksPage.tsx","pages/CreatePage.tsx","components/LinkCard.tsx","pages/DetailPage.tsx","pages/AuthPage.tsx","hooks/message.hook.tsx","components/Navbar.tsx","App.tsx","hooks/auth.hook.tsx","routes.tsx","serviceWorker.ts","index.tsx"],"names":["useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","clearError","noop","AuthContext","createContext","token","userId","login","logout","isAuthenticated","Loader","className","style","display","justifyContent","paddingTop","LinksList","links","console","log","length","map","link","index","key","from","to","_id","LinksPage","setLinks","useContext","fetchedLinks","Authorization","fetched","useEffect","then","CreatePage","history","useHistory","auth","setLink","window","M","updateTextFields","pressHandler","e","push","type","placeholder","id","value","onChange","target","onKeyPress","htmlFor","LinkCard","href","rel","clicks","Date","date","toLocaleDateString","DetailPage","linkId","useParams","getLink","AuthPage","email","password","form","setForm","text","toast","html","changeHandler","event","name","registerHandler","loginHandler","marginRight","onClick","disabled","Navbar","padding","preventDefault","App","setToken","ready","setReady","setUserId","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","path","exact","useRoutes","Provider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","catch"],"mappings":"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","file":"static/js/main.dcbb71e2.chunk.js","sourcesContent":["import { useCallback, useState } from 'react';\n\ninterface IHttp {\n    loading: boolean;\n    error: object | null;\n    request: (\n        url: string,\n        method?: string,\n        body?: any,\n        headers?: {}\n    ) => Promise<void>;\n    clearError: () => void;\n}\n\nexport const useHttp = (): IHttp => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [error, setError] = useState<object | null>(null);\n\n    const request = useCallback(\n        async (\n            url: string,\n            method: string = 'GET',\n            body = null,\n            headers = {}\n        ) => {\n            setLoading(true);\n\n            try {\n                if (body) {\n                    body = JSON.stringify(body);\n                    headers['Content-Type'] = 'application/json';\n                }\n\n                const response = await fetch(url, {\n                    method,\n                    body,\n                    headers,\n                });\n\n                const data = await response.json();\n\n                if (!response.ok) {\n                    throw new Error(data.message || 'Что-то пощло не так');\n                }\n\n                return data;\n            } catch (e) {\n                setError(e.message);\n                throw e;\n            } finally {\n                setLoading(false);\n            }\n        },\n        []\n    );\n\n    const clearError: () => void = useCallback(() => setError(null), []);\n\n    return { loading, request, error, clearError } as IHttp;\n};\n","import { createContext } from 'react';\n\nfunction noop() {}\n\nexport const AuthContext = createContext({\n    token: null,\n    userId: null,\n    login: noop,\n    logout: noop,\n    isAuthenticated: false,\n} as {\n    token?: string | null;\n    userId?: string | null;\n    login?: (jwtToken?: string, id?: string) => any;\n    logout: () => any;\n    isAuthenticated?: boolean;\n});\n","import React from 'react';\n\nexport const Loader = () => (\n    <div\n        className=\"preloader-wrapper active\"\n        style={{\n            display: 'flex',\n            justifyContent: 'center',\n            paddingTop: '2rem',\n        }}\n    >\n        <div className=\"spinner-layer spinner-green-only\">\n            <div className=\"circle-clipper left\">\n                <div className=\"circle\" />\n            </div>\n            <div className=\"gap-patch\">\n                <div className=\"circle\" />\n            </div>\n            <div className=\"circle-clipper right\">\n                <div className=\"circle\" />\n            </div>\n        </div>\n    </div>\n);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface ILink {\n    from: string;\n    to: string;\n    _id: string | (() => any | void);\n}\n\ninterface ILinks {\n    links?: ILink[] | undefined;\n}\n\nexport const LinksList: React.FC<ILinks> = ({ links }) => {\n    console.log(links);\n    return (\n        <>\n            {links?.length ? (\n                <table>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Оригинальная</th>\n                            <th>Сокращенная</th>\n                            <th>Открыть</th>\n                        </tr>\n                    </thead>\n\n                    <tbody>\n                        {links?.map(\n                            (link: ILink, index: number): JSX.Element => (\n                                <tr key={index}>\n                                    <td>{index + 1}</td>\n                                    <td>{link.from}</td>\n                                    <td>{link.to}</td>\n                                    <td>\n                                        <Link to={`detail/${link._id}`}>\n                                            Открыть\n                                        </Link>\n                                    </td>\n                                </tr>\n                            )\n                        )}\n                    </tbody>\n                </table>\n            ) : (\n                <p className=\"center\">Список ссылок пуст</p>\n            )}\n        </>\n    );\n};\n","import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { useHttp } from '../hooks/http.hook';\nimport { AuthContext } from '../context/AuthContext';\nimport { Loader } from '../components/Loader';\nimport { LinksList } from '../components/LinksList';\n\nexport const LinksPage: React.FC = () => {\n    const [links, setLinks] = useState<[]>([]);\n    const { loading, request } = useHttp();\n    const { token } = useContext(AuthContext);\n\n    const fetchedLinks: () => Promise<void> = useCallback(async (): Promise<\n        void\n    > => {\n        try {\n            const fetched: any = await request('/api/link', 'GET', null, {\n                Authorization: `Bearer ${token}`,\n            });\n            setLinks(fetched);\n        } catch (e) {}\n    }, [token, request]);\n\n    useEffect(() => {\n        fetchedLinks().then();\n    }, [fetchedLinks]);\n\n    if (loading) {\n        return <Loader />;\n    }\n\n    return <>{!loading && <LinksList links={links} />}</>;\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useHttp } from '../hooks/http.hook';\nimport { AuthContext } from '../context/AuthContext';\nimport { useHistory } from 'react-router-dom';\n\nexport const CreatePage: React.FC = () => {\n    const history = useHistory();\n    const auth = useContext(AuthContext);\n    const { request } = useHttp();\n    const [link, setLink] = useState<string>('');\n\n    const linkHandler = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        setLink(e.target.value);\n    };\n\n    useEffect(() => {\n        // @ts-ignore\n        window.M.updateTextFields();\n    }, []);\n\n    const pressHandler = async (e: React.KeyboardEvent): Promise<void> => {\n        if (e.key === 'Enter') {\n            try {\n                const data: any = await request(\n                    '/api/link/generate',\n                    'POST',\n                    {\n                        from: link,\n                    },\n                    {\n                        Authorization: `Bearer ${auth.token}`,\n                    }\n                );\n                history.push(`/detail/${data.link._id}`);\n            } catch (e) {}\n        }\n    };\n\n    return (\n        <div className=\"row\">\n            <div className=\"col s8 offset-s2\" style={{ paddingTop: '2rem' }}>\n                <div className=\"input-field\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Вставьте ссылку\"\n                        id=\"link\"\n                        value={link}\n                        onChange={linkHandler}\n                        onKeyPress={pressHandler}\n                    />\n                    <label htmlFor=\"link\">Введите ссылку</label>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\n\ninterface ILink {\n    link: {\n        from: string;\n        to: string;\n        clicks: number;\n        date: Date;\n    };\n}\n\nexport const LinkCard: React.FC<ILink> = ({ link }) => {\n    return (\n        <>\n            <h2>Ссылка</h2>\n            <p>\n                Ваша ссылка:\n                <a href={link.to} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {link.to}\n                </a>\n            </p>\n            <p>\n                Откуда:\n                <a href={link.from} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {link.from}\n                </a>\n            </p>\n            <p>\n                Количество кликов:\n                <strong>{link.clicks}</strong>\n            </p>\n            <p>\n                Дата создания:\n                <strong>{new Date(link.date).toLocaleDateString()}</strong>\n            </p>\n        </>\n    );\n};\n","import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useHttp } from '../hooks/http.hook';\nimport { AuthContext } from '../context/AuthContext';\nimport { Loader } from '../components/Loader';\nimport { LinkCard } from '../components/LinkCard';\n\nexport const DetailPage: React.FC = () => {\n    const [link, setLink] = useState(null);\n    const { id: linkId } = useParams();\n    const { request, loading } = useHttp();\n    const { token } = useContext(AuthContext);\n\n    const getLink: () => Promise<void> = useCallback(async (): Promise<\n        void\n    > => {\n        try {\n            const fetched: any = await request(\n                `/api/link/${linkId}`,\n                'GET',\n                null,\n                {\n                    Authorization: `Bearer ${token}`,\n                }\n            );\n            setLink(fetched);\n        } catch (e) {}\n    }, [token, linkId, request]);\n\n    useEffect((): void => {\n        getLink().then();\n    }, [getLink]);\n\n    if (loading) {\n        return <Loader />;\n    }\n\n    // @ts-ignore\n    return <>{!loading && link && <LinkCard link={link} />}</>;\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useHttp } from '../hooks/http.hook';\nimport { useMessage } from '../hooks/message.hook';\nimport { AuthContext } from '../context/AuthContext';\n\ninterface IAuth {\n    email: string;\n    password: string;\n}\n\nexport const AuthPage: React.FC = () => {\n    const auth = useContext(AuthContext);\n    const { loading, error, request, clearError } = useHttp();\n    const [form, setForm] = useState<IAuth>({\n        email: '',\n        password: '',\n    });\n    const message = useMessage();\n\n    useEffect(() => {\n        message(error);\n        clearError();\n    }, [error, message, clearError]);\n\n    useEffect(() => {\n        // @ts-ignore\n        window.M.updateTextFields();\n    }, []);\n\n    const changeHandler = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ): void => {\n        setForm({\n            ...form,\n            [event.target.name]: event.target.value,\n        });\n    };\n\n    const registerHandler = async () => {\n        try {\n            const data: any = await request('api/auth/register', 'POST', {\n                ...form,\n            });\n            message(data);\n        } catch (e) {}\n    };\n\n    const loginHandler = async () => {\n        try {\n            const data: any = await request('api/auth/login', 'POST', {\n                ...form,\n            });\n            // @ts-ignore\n            auth.login(data.token, data.userId);\n            message(`Добро пожаловать в систему`);\n        } catch (e) {}\n    };\n\n    return (\n        <div className=\"row\">\n            <div className=\"col s6 offset-s3\">\n                <h1>Сокращение ссылки</h1>\n                <div className=\"card blue darken-1\">\n                    <div className=\"card-content white-text\">\n                        <span className=\"card-title\">Авторизация</span>\n                        <div>\n                            <div className=\"input-field\">\n                                <input\n                                    placeholder=\"Введите email\"\n                                    id=\"email\"\n                                    type=\"text\"\n                                    className=\"validate yellow-input\"\n                                    name=\"email\"\n                                    value={form.email}\n                                    onChange={changeHandler}\n                                />\n                                <label htmlFor=\"email\">Email</label>\n                            </div>\n                            <div className=\"input-field\">\n                                <input\n                                    placeholder=\"Введите пароль\"\n                                    id=\"password\"\n                                    type=\"password\"\n                                    className=\"validate yellow-input\"\n                                    name=\"password\"\n                                    value={form.password}\n                                    onChange={changeHandler}\n                                />\n                                <label htmlFor=\"password\">Пароль</label>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"card-action\">\n                        <button\n                            className=\"btn yellow darken-4\"\n                            style={{ marginRight: 10 }}\n                            onClick={loginHandler}\n                            disabled={loading}\n                        >\n                            Войти\n                        </button>\n                        <button\n                            className=\"btn grey lighten-1 black-text\"\n                            onClick={registerHandler}\n                            disabled={loading}\n                        >\n                            Регистрация\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import { useCallback } from 'react';\n\nexport const useMessage = () => {\n    return useCallback((text) => {\n        // @ts-ignore\n        if (window.M && text) {\n            // @ts-ignore\n            window.M.toast({ html: text });\n        }\n    }, []);\n};\n","import React, { useContext } from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport { AuthContext } from '../context/AuthContext';\n\nexport const Navbar: React.FC = () => {\n    const history = useHistory();\n    const auth = useContext(AuthContext);\n    const logoutHandler = (event: React.SyntheticEvent) => {\n        event.preventDefault();\n        auth.logout();\n        history.push('/');\n    };\n\n    return (\n        <nav>\n            <div\n                className=\"nav-wrapper blue darken-1\"\n                style={{ padding: '0 2rem' }}\n            >\n                <span className=\"brand-logo\">Сокращение ссылок</span>\n                <ul id=\"nav-mobile\" className=\"right\">\n                    <li>\n                        <NavLink to=\"/create\">Создать</NavLink>\n                    </li>\n                    <li>\n                        <NavLink to=\"/links\">Список</NavLink>\n                    </li>\n                    <li>\n                        <a href=\"/\" onClick={logoutHandler}>\n                            Выйти\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    );\n};\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport 'materialize-css';\nimport { useRoutes } from './routes';\nimport { useAuth } from './hooks/auth.hook';\nimport { AuthContext } from './context/AuthContext';\nimport { Navbar } from './components/Navbar';\nimport { Loader } from './components/Loader';\n\nfunction App(): any {\n    const { token, login, logout, userId, ready } = useAuth();\n    const isAuthenticated: boolean = !!token;\n    const routes: React.ReactElement<any, any> | null = useRoutes(\n        isAuthenticated\n    );\n\n    if (!ready) {\n        return <Loader />;\n    }\n\n    return (\n        <AuthContext.Provider\n            value={{ token, login, logout, userId, isAuthenticated }}\n        >\n            <Router>\n                {isAuthenticated && <Navbar />}\n                <div className=\"container\">{routes}</div>\n            </Router>\n        </AuthContext.Provider>\n    );\n}\n\nexport default App;\n","import { useState, useCallback, useEffect } from 'react';\n\nconst storageName: string = 'userData';\n\nexport const useAuth = () => {\n    const [token, setToken] = useState(null);\n    const [ready, setReady] = useState<boolean>(false);\n    const [userId, setUserId] = useState(null);\n\n    const login = useCallback((jwtToken, id) => {\n        setToken(jwtToken);\n        setUserId(id);\n\n        localStorage.setItem(\n            storageName,\n            JSON.stringify({\n                userId: id,\n                token: jwtToken,\n            })\n        );\n    }, []);\n\n    const logout = useCallback(() => {\n        setToken(null);\n        setUserId(null);\n\n        localStorage.removeItem(storageName);\n    }, []);\n\n    useEffect(() => {\n        const data = JSON.parse(localStorage.getItem(storageName) as string);\n\n        if (data && data.token) {\n            login(data.token, data.userId);\n        }\n        setReady(true);\n    }, [login]);\n\n    return { login, logout, token, userId, ready };\n};\n","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { LinksPage } from './pages/LinksPage';\nimport { CreatePage } from './pages/CreatePage';\nimport { DetailPage } from './pages/DetailPage';\nimport { AuthPage } from './pages/AuthPage';\n\nexport const useRoutes: React.FC<boolean> = (isAuthenticated) => {\n    if (isAuthenticated) {\n        return (\n            <Switch>\n                <Route path=\"/links\" exact>\n                    <LinksPage />\n                </Route>\n                <Route path=\"/create\" exact>\n                    <CreatePage />\n                </Route>\n                <Route path=\"/detail/:id\" exact>\n                    <DetailPage />\n                </Route>\n                <Redirect to=\"/create\" />\n            </Switch>\n        );\n    }\n\n    return (\n        <Switch>\n            <Route path=\"/\" exact>\n                <AuthPage />\n            </Route>\n            <Redirect to=\"/\" />\n        </Switch>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}